{"version":3,"sources":["Redux/index.js","action/index.js","components/loading.js","components/randomQuote.js","reducers/quoteReducer.js","reducers/index.js","store.js","components/App.js","reportWebVitals.js","index.js"],"names":["NEW_QUOTE","FETCH_QUOTES","fetchQuotes","dispatch","fetch","then","response","ok","Error","statusText","console","log","json","data","type","payload","quotes","catch","error","newQuote","randomNo","Loading","className","Component","RandomQuote","getNewQuote","bind","this","props","randomQuoteIndex","Math","floor","random","loading","randomNumber","quote","author","randomColor","style","backgroundColor","id","color","href","title","target","rel","onClick","connect","state","colors","bindActionCreators","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3896630.chunk.js","sourcesContent":["export const NEW_QUOTE = 'NEW_QUOTE';\nexport const FETCH_QUOTES = 'FETCH_QUOTES';\n","import {  FETCH_QUOTES, NEW_QUOTE } from '../Redux';\n\n// FETCH_QUOTES\nexport const fetchQuotes = () => dispatch => {\n    fetch('data/quotes.json')\n    \n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      console.log('ok');\n      return response.json();\n    })\n    .then(data => {\n        dispatch({\n            type: FETCH_QUOTES,\n            payload: data.quotes\n        });\n    })\n    .catch(error => {\n        console.log(error);\n    })\n}\n\n//NEW_QUOTE\nexport const newQuote = randomNo => ({\n    type: NEW_QUOTE,\n    payload: randomNo,\n});\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Loading extends Component {\n    render(){\n        return(\n            <div className=\"loading-container\">\n                <div className=\"loader\" />\n            </div>\n        );\n    }\n}\nexport default Loading;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport {  connect } from 'react-redux';\nimport { newQuote, fetchQuotes } from '../action/index';\nimport Loading from './loading';\nimport './App.css';\n\nclass RandomQuote extends Component {\n    constructor(){\n        super();\n        this.getNewQuote = this.getNewQuote.bind(this);\n    }\n    componentDidMount(){\n        this.props.fetchQuotes();\n        this.getNewQuote();\n        console.log(this.props);\n    }\n    getNewQuote() {\n        const randomQuoteIndex = Math.floor(Math.random() * 102);\n        this.props.newQuote(randomQuoteIndex);\n    }\n    render(){\n        if(this.props.loading){\n            return <Loading />;\n        }\n        const { quote, author } = this.props.quotes[this.props.randomNumber];\n        const randomColor = this.props.randomColor[Math.floor(Math.random() * 11)];\n        \n        return(\n            <div className=\"wrapper\" style={{ backgroundColor: randomColor }}>\n                <div id=\"quote-box\">\n                    <div className=\"quote-text\">\n                        <i className=\"fa fa-quote-left\"></i>\n                        <q id=\"text\" style={{ color: randomColor }}>{quote}</q>\n                    </div>\n                    <div className=\"quote-author\" style={{ color: randomColor }}>\n                        <span id=\"author\">{author}</span>\n                    </div>\n                    <div className=\"button\">\n                        <a href={`https://twitter.com/intent/tweet?hashtags=quotes,freecodecamp&related=freecodecamp&text=\"${quote}\" %0D%0A- ${author}%0D%0A`}\n                        className=\"b\"\n                        id=\"tweet-quote\"\n                        title=\"Tweet this quote!\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\" \n                        style={{ backgroundColor: randomColor}} > \n                            TWEET\n                        </a>\n                        <button className=\"button\" id=\"new-quote\" onClick={this.getNewQuote}style={{ backgroundColor: randomColor}} >New Quotes</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    quotes: state.quotes.data,\n    randomNumber: state.quotes.randomNumber,\n    loading: state.quotes.loading,\n    randomColor: state.quotes.colors\n});\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    newQuote,\n    fetchQuotes\n}, dispatch );\nexport default connect(mapStateToProps, mapDispatchToProps)( RandomQuote);\n","import {NEW_QUOTE, FETCH_QUOTES} from '../Redux';\n\nconst initialState = {\n  loading: true,\n  error: false,\n  data: [],\n  randomNumber: '',\n  colors: [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    '#BDBB99',\n    '#77B1A9',\n    '#73A857',\n  ],\n};\n\nexport default function(state = initialState, action){\n    switch (action.type){\n        case NEW_QUOTE:\n            return{\n                ...state,\n                randomNumber: action.payload\n            };\n        case FETCH_QUOTES:\n            return{\n                ...state,\n                loading: false,\n                data: action.payload\n            };\n        default: \n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport quoteReducer from './quoteReducer';\n\nexport default combineReducers({\n    quotes: quoteReducer\n});\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport RandomQuote from './randomQuote';\nimport { Provider } from 'react-redux';\nimport  store  from '../store';\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return (\n        <Provider store={store}>\n            <RandomQuote />\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}